import logging
from functools import wraps
from aiogram.types import Message
from typing import Callable, Awaitable, Any
from redis.asyncio import Redis

from bot.clients.redis_client import RedisClient
from bot.config import settings

MAX_COUNT_FILES = settings.MAX_COUNT_FILES

logger = logging.getLogger(__name__)

def file_upload_limit(limit: int = MAX_COUNT_FILES):
    def decorator(handler: Callable[..., Awaitable[Any]]):
        @wraps(handler)
        async def wrapper(message: Message, *args, **kwargs):
            redis: Redis = await RedisClient.get_instance()
            user_id = message.from_user.id
            key = f"media_processing:{user_id}"

            try:
                current_count = await redis.get(key)
                current_count = int(current_count or 0)

                if current_count >= limit:
                    await message.answer(
                        f"üì¶ –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ {current_count} —Ñ–∞–π–ª–æ–≤.\n"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî {limit}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —á–∞—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                    )
                    return None
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return None

            return await handler(message, *args, **kwargs)
        return wrapper
    return decorator
