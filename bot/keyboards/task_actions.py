from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from bot.config import settings
from typing import List, Dict


class TaskActionsKeyboards:

    @staticmethod
    def create_input_text_keyboard(task_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º"""
        inline_keyboard = [
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_text")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é", callback_data=f"back_to_task_info")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    @staticmethod
    def create_files_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª—ã")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    @staticmethod
    def create_actions_keyboard(task_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π"""
        buttons = [
            [
                InlineKeyboardButton(
                    text='üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    callback_data=f'comment_{task_id}'
                ),
            ],
            [
                InlineKeyboardButton(
                    text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',
                    callback_data=f'cancel_{task_id}'
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º',
                    callback_data='show_tasks'
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_task_keyboard(tasks: List[Dict]) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á."""
        buttons = []
        for idx, task in enumerate(tasks):
            task_id = task.get("id")
            title = next(
                (f["value"] for f in task.get("fields", []) if f.get("id") == 1),
                "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            )

            emoji = settings.NUMBERS_EMOJI[idx] if idx < len(settings.NUMBERS_EMOJI) else "üìù"
            buttons.append(
                InlineKeyboardButton(
                    text=f"{emoji} {title} (#{task_id})",
                    callback_data=f"task_{task_id}"
                )
            )

        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (2 –≤ —Ä—è–¥)
        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def create_empty_tasks_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á –Ω–µ—Ç."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üÜï –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='process_data')],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])

    @staticmethod
    def get_text_edit_keyboard(task_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"task_{task_id}"
                )
            ]
        ])