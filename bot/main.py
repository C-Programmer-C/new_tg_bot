import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.storage.base import DefaultKeyBuilder
from aiogram.types import BotCommand

from bot.clients.bot_client import BotClient
from bot.clients.redis_client import RedisClient
from config import settings
from bot.handlers.main_menu import start_router
from bot.scheduler import periodic_task_fetcher
from bot.handlers.task_actions import task_actions_router
from bot.handlers.create_task import create_task_router
from bot.handlers.closed_tasks import closed_tasks_router

logger = logging.getLogger(__name__)
_periodic_task: asyncio.Task | None = None
disp = None

async def on_startup():
    print("‚ñ∂Ô∏è on_startup fired")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∏ FSM storage
    redis = await RedisClient.get_instance()
    await redis.flushall()
    disp.fsm_storage = RedisStorage(
        redis=redis,
        key_builder=DefaultKeyBuilder(with_destiny=True),
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ dp.bot
    bot: Bot = BotClient.get_instance()
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞"),
    ])

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    global _periodic_task
    _periodic_task = asyncio.create_task(periodic_task_fetcher())
    logger.info("üöÄ periodic_task_fetcher –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    print("‚ñ∂Ô∏è on_shutdown fired")
    global _periodic_task
    if _periodic_task:
        _periodic_task.cancel()
        try:
            await _periodic_task
        except asyncio.CancelledError:
            pass

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    await BotClient.close()
    await RedisClient.close()
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.DEBUG if settings.DEBUG else logging.INFO,
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s",
        handlers=[
            logging.FileHandler("bot.log", encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )
    print("‚ñ∂Ô∏è Entering main()")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher
    bot = BotClient.get_instance()
    global disp
    dp = Dispatcher()
    disp = dp
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    for router in (
        start_router,
        task_actions_router,
        create_task_router,
        closed_tasks_router,
    ):
        dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle-—Ö—É–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
