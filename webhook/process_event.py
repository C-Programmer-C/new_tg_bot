import asyncio
import json
import logging
from redis.asyncio import Redis

from bot.clients.redis_client import RedisClient
from config import settings
from webhook.notify_user_and_clear_state import notify_user_and_clear_state

logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
QUEUE_KEY = "pyrus:event:queue"
COMMENTS_TTL = settings.PYRUS_IDEMPOTENT_TTL
LOCK_TTL = 30  # —Å–µ–∫

redis_client: Redis | None = None

# ---------- –ü—Ä–æ–¥—é—Å–µ—Ä ----------
async def process_event(event):
    """
    –í–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–∞–∑—É ‚Äî –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å Redis.
    """
    task_id = event.get("task_id")
    redis = await RedisClient.get_instance()
    event_json = json.dumps(event)
    await redis.rpush(QUEUE_KEY, event_json)
    logging.info(f"[QUEUE] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ task_id={task_id}")


# ---------- –í–æ—Ä–∫–µ—Ä ----------
async def worker():
    redis = await RedisClient.get_instance()
    await redis.flushall()
    logging.info(f"[WORKER] –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å {QUEUE_KEY}...")

    while True:
        try:
            logging.info("[WORKER] –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏–µ...")
            result = await redis.blpop([QUEUE_KEY], timeout=0)  # –∂–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ

            if not result:
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç")
                continue

            _, event = result

            event = json.loads(event)

            task_id = event.get("task_id")
            lock_key = f"lock:task:{task_id}"

            # –õ–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not await redis.set(lock_key, "1", ex=LOCK_TTL, nx=True):
                logging.info(f"[SKIP] –ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                continue

            try:
                logging.info(f"[PROCESS] task_id={task_id}, event={event.get('event')}")

                comments_with_channel = [
                    c for c in (event.get("task", {}).get("comments") or [])
                    if c.get("channel") is not None or c.get("action") == "reopened"
                ]
                if not comments_with_channel:
                    logging.info(f"[NO COMMENTS] –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å channel —É {task_id}")
                    continue

                with open("comments.json", "w", encoding="utf-8") as f:
                    json.dump(list(reversed(comments_with_channel)), f, indent=4, ensure_ascii=False)

                user_id = event.get("user_id")
                print(user_id)
                for c in reversed(comments_with_channel):
                    comment_key = f"comment:{c['id']}"

                    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å id: {c['id']}")

                    if c.get("action") == "reopened":
                        logging.info(f"[STOP-REOPENED] –û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å id: {c['id']} —Å —Å–æ–±—ã—Ç–∏–µ–º '–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏', ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                        break

                    if await redis.exists(comment_key):
                        logging.info(f"[STOP-DUP] {c['id']} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        break

                    await redis.set(comment_key, "1", ex=COMMENTS_TTL)
                    logging.info(f"[NEW] {c['id']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis")

                    text = c.get("text")
                    message_id = c.get("id")
                    asyncio.create_task(notify_user_and_clear_state(user_id, text, message_id))

                    logging.info(f"[PROCESS] –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {c['id']} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

                logging.info(f"[DONE] –ó–∞–¥–∞—á–∞ c id: {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")

            finally:
                await redis.delete(lock_key)

        except Exception as e:
            logging.exception(f"[ERROR] Worker –ø–æ–π–º–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ


# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ ----------
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,  # üëà —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤–∏–¥–Ω—ã debug-—Å–æ–æ–±—â–µ–Ω–∏—è
        format="%(asctime)s [%(levelname)s] %(message)s"
    )
    asyncio.run(worker())