# python 3.10+
from aiogram import Bot
from aiogram.fsm.storage.base import StorageKey, DefaultKeyBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import Message

from bot.clients.redis_client import RedisClient
from bot.main import disp
from bot.clients.bot_client import BotClient
import logging

async def notify_user_and_clear_state(user_id: int, new_message_text: str,
                                      message_id: int):
    """
    - user_id: telegram user id (–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ chat_id == user_id)
    - new_message_text: —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∂–∏ forward_from_chat_id –∏ forward_message_id
    """
    try:
        bot_client = BotClient.get_instance()
        bot: Bot = bot_client
        redis = await RedisClient.get_instance()
        storage = RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(with_destiny=True))
        me = await bot.get_me()
        bot_id = me.id

        key = StorageKey(bot_id=bot_id, chat_id=user_id, user_id=user_id)

        current_state = await storage.get_state(key=key)  # None –∏–ª–∏ str

        logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {user_id}:\n{current_state}")

        if current_state:
            fsm = FSMContext(storage=storage, key=key)
            await fsm.clear()

            apologize_text = (
                "üôè –ò–∑–≤–∏–Ω–∏—Ç–µ ‚Äî —É –≤–∞—Å –±—ã–ª –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, "
                "–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –∑–∞–∫—Ä—ã–ª–∏ üóë –∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úâÔ∏è."
            )
            await bot.send_message(chat_id=user_id, text=apologize_text)


        await bot.send_message(chat_id=user_id, text=new_message_text)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}:\n{e}")